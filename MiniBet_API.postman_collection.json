{
  "info": {
    "name": "MiniBet API",
    "description": "Mini Betting Platform API for testing Airtel Money endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has status ok', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('ok');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Create User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"username\": \"johndoe\",\n  \"password\": \"password123\",\n  \"msisdn\": \"254712345678\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/users",
          "host": ["{{base_url}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has user id', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.collectionVariables.set('user_id', jsonData.id);",
              "});",
              "",
              "pm.test('User has initial balance of 0', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.eql('0.00');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Get User Balance",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/{{user_id}}/balance",
          "host": ["{{base_url}}"],
          "path": ["users", "{{user_id}}", "balance"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has balance', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('balance');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Create Deposit Transaction",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": {{user_id}},\n  \"amount\": 100.00,\n  \"msisdn\": \"254712345678\",\n  \"description\": \"Deposit to wallet\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/transactions/deposit",
          "host": ["{{base_url}}"],
          "path": ["transactions", "deposit"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has transaction id', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('transactionId');",
              "    pm.collectionVariables.set('deposit_transaction_id', jsonData.transactionId);",
              "});",
              "",
              "pm.test('Transaction status is pending', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('pending');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Process Deposit Transaction",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/transactions/deposit/{{deposit_transaction_id}}/process",
          "host": ["{{base_url}}"],
          "path": ["transactions", "deposit", "{{deposit_transaction_id}}", "process"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Transaction processed successfully', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.transaction.status).to.eql('completed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Verify Updated Balance",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/{{user_id}}/balance",
          "host": ["{{base_url}}"],
          "path": ["users", "{{user_id}}", "balance"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Balance updated after deposit', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.balance).to.eql('100.00');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "7. Create Withdrawal Transaction",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": {{user_id}},\n  \"amount\": 50.00,\n  \"msisdn\": \"254712345678\",\n  \"description\": \"Withdrawal from wallet\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/transactions/withdrawal",
          "host": ["{{base_url}}"],
          "path": ["transactions", "withdrawal"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has transaction id', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('transactionId');",
              "    pm.collectionVariables.set('withdrawal_transaction_id', jsonData.transactionId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "8. Process Withdrawal Transaction",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/transactions/withdrawal/{{withdrawal_transaction_id}}/process",
          "host": ["{{base_url}}"],
          "path": ["transactions", "withdrawal", "{{withdrawal_transaction_id}}", "process"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Withdrawal processed successfully', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.transaction.status).to.eql('completed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "9. Get All Transactions",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/transactions",
          "host": ["{{base_url}}"],
          "path": ["transactions"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "10. Get User Transactions",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/transactions?userId={{user_id}}",
          "host": ["{{base_url}}"],
          "path": ["transactions"],
          "query": [
            {
              "key": "userId",
              "value": "{{user_id}}"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('All transactions belong to user', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "    if (jsonData.length > 0) {",
              "        jsonData.forEach(function(transaction) {",
              "            pm.expect(transaction.userId).to.eql(parseInt(pm.collectionVariables.get('user_id')));",
              "        });",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
